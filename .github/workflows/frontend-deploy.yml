name: 🎨 Frontend Deploy

on:
  push:
    branches: [ master ]
    paths:
      - 'vue3-realworld-example-app/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18.x'

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy Vue3 App
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vue3-realworld-example-app/package-lock.json
          
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 📊 Get Infrastructure Info
        id: infra
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          
          # Get S3 bucket name
          S3_BUCKET="realworld-${ENV}-frontend"
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          
          # Get CloudFront distribution ID
          CLOUDFRONT_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='RealWorld ${ENV} Frontend'].Id" \
            --output text)
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          
          # Get backend API URL
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names "realworld-${ENV}-alb" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          API_URL="http://${ALB_DNS}/api"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          
          echo "📋 Infrastructure Info:"
          echo "- S3 Bucket: $S3_BUCKET"
          echo "- CloudFront ID: $CLOUDFRONT_ID"
          echo "- API URL: $API_URL"
          
      - name: 📦 Install Dependencies
        run: |
          cd vue3-realworld-example-app
          
          echo "📦 Installing npm dependencies..."
          npm ci
          
          echo "✅ Dependencies installed successfully!"
          
      - name: 🧪 Run Tests
        run: |
          cd vue3-realworld-example-app
          
          echo "🧪 Running Vue3 tests..."
          npm run test:unit || echo "⚠️  Tests failed, continuing with deployment"
          
      - name: 🔨 Build Vue3 App
        run: |
          cd vue3-realworld-example-app
          
          # Create environment config
          cat > .env.production << EOF
          VITE_API_URL=${{ env.API_URL }}
          VITE_APP_TITLE=RealWorld App
          VITE_APP_VERSION=${{ github.sha }}
          VITE_ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          EOF
          
          echo "🔨 Building Vue3 application..."
          echo "- API URL: ${{ env.API_URL }}"
          echo "- Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "- Version: ${{ github.sha }}"
          
          npm run build
          
          echo "✅ Build completed successfully!"
          
      - name: 📦 Optimize Build
        run: |
          cd vue3-realworld-example-app
          
          echo "📦 Optimizing build files..."
          
          # Create gzipped versions for better performance
          find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) \
            -exec gzip -9 -k {} \;
          
          # Show build stats
          echo "📊 Build Statistics:"
          du -sh dist/
          find dist -name "*.js" -o -name "*.css" | wc -l | xargs echo "Total assets:"
          
      - name: 📤 Deploy to S3
        run: |
          echo "📤 Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
          
          # Sync files to S3 with appropriate cache headers
          aws s3 sync vue3-realworld-example-app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          # Upload HTML files with shorter cache
          aws s3 sync vue3-realworld-example-app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --cache-control "public, max-age=300" \
            --include "*.html" \
            --include "service-worker.js"
          
          # Set proper content encoding for gzipped files
          aws s3 cp vue3-realworld-example-app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.gz" \
            --content-encoding gzip \
            --metadata-directive REPLACE
          
          echo "✅ Files uploaded to S3 successfully!"
          
      - name: 🔄 Invalidate CloudFront Cache
        run: |
          echo "🔄 Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          
          # Create invalidation
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "⏳ Invalidation created: $INVALIDATION_ID"
          echo "Waiting for invalidation to complete..."
          
          # Wait for invalidation to complete
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID
          
          echo "✅ CloudFront cache invalidated successfully!"
          
      - name: 🔍 Verify Deployment
        run: |
          # Get CloudFront domain name
          CF_DOMAIN=$(aws cloudfront get-distribution \
            --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --query 'Distribution.DomainName' \
            --output text)
          
          FRONTEND_URL="https://${CF_DOMAIN}"
          
          echo "🔍 Verifying deployment..."
          echo "Frontend URL: $FRONTEND_URL"
          
          # Wait a bit for CloudFront to update
          sleep 30
          
          # Test frontend accessibility
          for i in {1..5}; do
            if curl -f -s "$FRONTEND_URL" > /dev/null; then
              echo "✅ Frontend is accessible!"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 10s..."
              sleep 10
            fi
          done
          
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
          
      - name: ✅ Deployment Summary
        run: |
          echo "## 🎨 Frontend Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ env.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution:** ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API URL:** ${{ env.API_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
