name: Terraform Apply

on:
  push:
    branches: [ master ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev2'
        type: choice
        options:
          - dev2
          - prod
      auto_approve:
        description: 'Auto approve the apply'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: us-east-1

jobs:
  terraform-apply:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev2' }}
    
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
            AUTO_APPROVE="${{ github.event.inputs.auto_approve }}"
          else
            ENV="dev2"  # Default for push to master
            AUTO_APPROVE="true"  # Auto approve for push events
          fi
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          echo "AUTO_APPROVE=$AUTO_APPROVE" >> $GITHUB_ENV
          echo "TF_DIR=./terraform/environments/dev" >> $GITHUB_ENV
          echo "Deploying to environment: $ENV"
          echo "Auto approve: $AUTO_APPROVE"
          
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_DIR }}
        
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
          
          # Check if plan has changes
          if terraform show -json tfplan | jq -e '.resource_changes | length > 0' > /dev/null; then
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            echo "Changes detected in plan"
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            echo "No changes detected in plan"
          fi
        working-directory: ${{ env.TF_DIR }}
        
      - name: Terraform Apply
        id: apply
        if: env.HAS_CHANGES == 'true'
        run: |
          if [ "${{ env.AUTO_APPROVE }}" = "true" ]; then
            echo "Applying changes automatically..."
            terraform apply -auto-approve tfplan
          else
            echo "Plan created but auto-approve is disabled"
            echo "To apply manually, run:"
            echo "terraform apply tfplan"
            exit 0
          fi
        working-directory: ${{ env.TF_DIR }}
        
      - name: Get Infrastructure Outputs
        id: outputs
        if: steps.apply.outcome == 'success'
        run: |
          echo "Getting infrastructure outputs..."
          
          # Get key outputs
          API_URL=$(terraform output -raw api_fqdn 2>/dev/null || echo "Not available")
          APP_URL=$(terraform output -raw app_fqdn 2>/dev/null || echo "Not available")
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "Not available")
          S3_BUCKET=$(terraform output -raw s3_bucket_id 2>/dev/null || echo "Not available")
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "Not available")
          ECR_REPO=$(terraform output -raw ecr_repository_name 2>/dev/null || echo "Not available")
          ECS_CLUSTER=$(terraform output -raw ecs_ecs_cluster_id 2>/dev/null | cut -d'/' -f2 || echo "Not available")
          ECS_SERVICE=$(terraform output -raw ecs_ecs_service_name 2>/dev/null || echo "Not available")
          
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
        working-directory: ${{ env.TF_DIR }}
        
      - name: Verify Infrastructure
        if: steps.apply.outcome == 'success'
        run: |
          echo "Verifying infrastructure..."
          
          # Check if ALB is accessible (if available)
          if [ "${{ env.ALB_DNS }}" != "Not available" ]; then
            echo "Testing ALB connectivity..."
            for i in {1..3}; do
              if curl -s -o /dev/null -w "%{http_code}" "http://${{ env.ALB_DNS }}/api/health" | grep -q "200\|404"; then
                echo "ALB is accessible"
                break
              else
                echo "ALB check attempt $i failed, retrying..."
                sleep 10
              fi
            done
          fi
          
          # Check if S3 bucket exists
          if [ "${{ env.S3_BUCKET }}" != "Not available" ]; then
            if aws s3 ls "s3://${{ env.S3_BUCKET }}" > /dev/null 2>&1; then
              echo "S3 bucket is accessible"
            else
              echo "S3 bucket check failed"
            fi
          fi
          
      - name: Deployment Summary
        run: |
          echo "## Infrastructure Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Terraform Directory:** ${{ env.TF_DIR }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auto Approved:** ${{ env.AUTO_APPROVE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changes Applied:** ${{ env.HAS_CHANGES }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.apply.outcome }}" = "success" ]; then
            echo "### Infrastructure Endpoints:" >> $GITHUB_STEP_SUMMARY
            echo "- **API URL:** https://${{ env.API_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **App URL:** https://${{ env.APP_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **ALB DNS:** ${{ env.ALB_DNS }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### AWS Resources:" >> $GITHUB_STEP_SUMMARY
            echo "- **S3 Bucket:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
            echo "- **CloudFront Distribution:** ${{ env.CLOUDFRONT_ID }}" >> $GITHUB_STEP_SUMMARY
            echo "- **ECR Repository:** ${{ env.ECR_REPO }}" >> $GITHUB_STEP_SUMMARY
            echo "- **ECS Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
            echo "- **ECS Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Quick Links:" >> $GITHUB_STEP_SUMMARY
            echo "- [API Health Check](https://${{ env.API_URL }}/api/health)" >> $GITHUB_STEP_SUMMARY
            echo "- [Frontend App](https://${{ env.APP_URL }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
            if [ "${{ env.HAS_CHANGES }}" = "false" ]; then
              echo "- No changes detected in Terraform plan" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Changes detected but apply was skipped (auto-approve disabled)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Handle Failures
        if: failure()
        run: |
          echo "## Infrastructure Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Step that failed:** Check the logs above" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Troubleshooting:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the Terraform logs in the failed step" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify AWS credentials and permissions" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure all required variables are set" >> $GITHUB_STEP_SUMMARY
          echo "4. Check for resource conflicts or dependencies" >> $GITHUB_STEP_SUMMARY
