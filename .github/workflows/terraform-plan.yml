name: 🏗️ Terraform Plan

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan'
        required: true
        default: 'dev2'
        type: choice
        options:
          - dev2
          - prod

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: 🔍 Validate & Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev2' }}
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 📋 Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            ENV="dev2"  # Default for PR
          fi
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          echo "TF_DIR=./terraform/environments/dev" >> $GITHUB_ENV
          echo "Planning for environment: $ENV"
          
      - name: 📋 Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true
        
      - name: ⚡ Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
        
      - name: ✅ Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_DIR }}
        
      - name: 📊 Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
          
          # Check if plan has changes
          if terraform show -json tfplan | jq -e '.resource_changes | length > 0' > /dev/null; then
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true
        
      - name: 🔒 Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
          
      - name: 📊 Plan Summary
        run: |
          echo "## 🏗️ Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Directory:** ${{ env.TF_DIR }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Format Check: ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Plan: ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Has Changes: ${{ env.HAS_CHANGES }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 📝 Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput = '';
            
            try {
              planOutput = fs.readFileSync('${{ env.TF_DIR }}/plan_output.txt', 'utf8');
            } catch (error) {
              planOutput = 'Plan output not available';
            }
            
            const output = `#### 🏗️ Terraform Plan Results for ${{ env.ENVIRONMENT }}
            
            #### 📋 Format Check: \`${{ steps.fmt.outcome }}\`
            #### ⚡ Initialization: \`${{ steps.init.outcome }}\`
            #### ✅ Validation: \`${{ steps.validate.outcome }}\`
            #### 📊 Plan: \`${{ steps.plan.outcome }}\`
            #### 🔄 Has Changes: \`${{ env.HAS_CHANGES }}\`
            
            <details><summary>📄 Show Plan Output</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ env.ENVIRONMENT }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: ❌ Fail if Issues Found
        if: steps.fmt.outcome != 'success' || steps.init.outcome != 'success' || steps.validate.outcome != 'success' || steps.plan.outcome != 'success'
        run: |
          echo "❌ Terraform validation failed. Please check the logs above."
          exit 1
