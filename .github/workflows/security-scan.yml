name: 🔒 Security Scan

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  code-scan:
    name: 🔍 Code Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      actions: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  docker-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Build Flask Docker Image
        run: |
          cd realworld-flask
          docker build -t flask-app:scan .
          
      - name: 🔒 Run Trivy vulnerability scanner on Flask image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-app:scan'
          format: 'sarif'
          output: 'trivy-flask-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 📤 Upload Flask Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-flask-results.sarif'
          category: 'docker-flask'
          
  terraform-scan:
    name: 🏗️ Terraform Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔒 Run Trivy on Terraform configs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'sarif'
          output: 'trivy-terraform-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: 📤 Upload Terraform scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-terraform-results.sarif'
          category: 'terraform'
          
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: vue3-realworld-example-app/package-lock.json
          
      - name: 🔧 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Frontend Dependencies
        run: |
          cd vue3-realworld-example-app
          npm install --legacy-peer-deps
          
      - name: 📦 Install Backend Dependencies
        run: |
          cd realworld-flask
          pip install -r requirements.txt
          
      - name: 🔒 Run npm audit
        run: |
          cd vue3-realworld-example-app
          npm audit --audit-level=moderate || true
          
      - name: 🔒 Run Python safety check
        run: |
          pip install safety
          cd realworld-flask
          safety check --json || true
          
      - name: 🔒 Scan Frontend dependencies with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './vue3-realworld-example-app'
          format: 'sarif'
          output: 'trivy-frontend-deps.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 🔒 Scan Backend dependencies with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './realworld-flask'
          format: 'sarif'
          output: 'trivy-backend-deps.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 📤 Upload Frontend dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-deps.sarif'
          category: 'frontend-dependencies'
          
      - name: 📤 Upload Backend dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-deps.sarif'
          category: 'backend-dependencies'
          
  secret-scan:
    name: 🔐 Secret Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning
          
      - name: 🔒 Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [code-scan, terraform-scan, dependency-scan, secret-scan]
    if: always()
    
    steps:
      - name: 📊 Generate Security Summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Scan:** ${{ needs.code-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Scan:** ${{ needs.terraform-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan:** ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📅 Scheduled Scan" >> $GITHUB_STEP_SUMMARY
            echo "This is a scheduled weekly security scan." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 How to View Results:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the **Security** tab in this repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on **Code scanning alerts** to view findings" >> $GITHUB_STEP_SUMMARY
          echo "3. Review and remediate any critical or high-severity issues" >> $GITHUB_STEP_SUMMARY
          
          # Check if any scans failed
          if [[ "${{ needs.code-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.terraform-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Some scans failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed jobs above for more details." >> $GITHUB_STEP_SUMMARY
          fi
